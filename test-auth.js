// Script de test pour les APIs d'authentification
// Usage: node test-auth.js

const BASE_URL = 'http://localhost:3000';

async function testSendCode() {
  console.log('üß™ Test envoi de code...');
  try {
    const response = await fetch(`${BASE_URL}/api/auth/send-code`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: 'test@example.com' })
    });
    
    if (response.ok) {
      console.log('‚úÖ Envoi de code r√©ussi');
    } else {
      console.log('‚ùå Erreur envoi de code:', response.status);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

async function testVerifyCode() {
  console.log('üß™ Test v√©rification de code...');
  try {
    const response = await fetch(`${BASE_URL}/api/auth/verify-code`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email: 'test@example.com', code: '123456' })
    });
    
    const result = await response.text();
    console.log('üìù R√©ponse v√©rification:', response.status, result);
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

async function testCreateInvoice() {
  console.log('üß™ Test cr√©ation de facture...');
  try {
    const response = await fetch(`${BASE_URL}/api/create-invoice`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ amount: 1000, description: 'Test facture' })
    });
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Facture cr√©√©e:', result.invoice.id);
      return result.invoice.id;
    } else {
      console.log('‚ùå Erreur cr√©ation facture:', response.status);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

async function testCheckInvoice(invoiceId) {
  console.log('üß™ Test v√©rification de facture...');
  try {
    const response = await fetch(`${BASE_URL}/api/check-invoice?id=${invoiceId}`);
    
    if (response.ok) {
      const result = await response.json();
      console.log('‚úÖ Statut facture:', result.status, result.isTest ? '(test)' : '');
    } else {
      console.log('‚ùå Erreur v√©rification facture:', response.status);
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

async function runTests() {
  console.log('üöÄ D√©marrage des tests d\'authentification\n');
  
  await testSendCode();
  console.log('');
  
  await testVerifyCode();
  console.log('');
  
  const invoiceId = await testCreateInvoice();
  console.log('');
  
  if (invoiceId) {
    await testCheckInvoice(invoiceId);
  }
  
  console.log('\n‚ú® Tests termin√©s');
}

// V√©rifier si fetch est disponible (Node.js 18+)
if (typeof fetch === 'undefined') {
  console.log('‚ùå Ce script n√©cessite Node.js 18+ avec fetch int√©gr√©');
  console.log('üí° Ou installez node-fetch: npm install node-fetch');
  process.exit(1);
}

runTests().catch(console.error); 