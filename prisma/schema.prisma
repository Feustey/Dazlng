generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_ACCELERATE_URL")
  directUrl = env("DIRECT_URL")
}

model History {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  price     Float
  volume    Float
  marketCap Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model PeerOfPeer {
  id              String   @id @default(cuid())
  nodePubkey      String
  peerPubkey      String
  alias           String
  platform        String
  version         String
  total_fees      Float
  avg_fee_rate_ppm Float
  total_capacity  Float
  active_channels Int
  total_volume    Float
  total_peers     Int
  uptime          Float
  opened_channel_count Int
  color           String
  address         String
  closed_channel_count Int
  pending_channel_count Int
  avg_capacity    Float
  avg_fee_rate    Float
  avg_base_fee_rate Float
  betweenness_rank Int
  eigenvector_rank Int
  closeness_rank  Int
  weighted_betweenness_rank Int
  weighted_closeness_rank Int
  weighted_eigenvector_rank Int
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  node            Node     @relation(fields: [nodePubkey], references: [pubkey])

  @@index([nodePubkey])
  @@index([timestamp])
}

model Node {
  id                      String   @id @default(cuid())
  pubkey                  String   @unique
  alias                   String
  platform                String
  version                 String
  total_fees              Float
  avg_fee_rate_ppm        Float
  total_capacity          Float
  active_channels         Int
  total_volume            Float
  total_peers             Int
  uptime                  Float
  opened_channel_count    Int
  color                   String
  address                 String
  closed_channel_count    Int
  pending_channel_count   Int
  avg_capacity            Float
  avg_fee_rate            Float
  avg_base_fee_rate       Float
  betweenness_rank        Int
  eigenvector_rank        Int
  closeness_rank          Int
  weighted_betweenness_rank Int
  weighted_closeness_rank   Int
  weighted_eigenvector_rank Int
  timestamp               DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  peersOfPeers           PeerOfPeer[]

  @@index([timestamp])
}

model User {
  id                    String    @id @default(cuid())
  email                 String    @unique
  name                  String?
  password              String
  role                  String    @default("user")
  subscriptionStatus    String?
  subscriptionTier      String?
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([email])
}

model Transaction {
  id        String   @id @default(cuid())
  amount    Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([sessionId])
  @@index([email])
  @@index([expiresAt])
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([email])
  @@index([expiresAt])
}

model CentralityData {
  id        String   @id @default(cuid())
  nodePubkey String
  metric    String
  value     Float
  timestamp DateTime @default(now())

  @@index([nodePubkey])
  @@index([metric])
  @@index([timestamp])
}

model Recommendation {
  id        String   @id @default(cuid())
  nodePubkey String
  type      String
  content   String
  priority  Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([nodePubkey])
  @@index([type])
  @@index([status])
}

model NetworkSummary {
  id              String   @id @default(cuid())
  totalNodes      Int
  totalChannels   Int
  totalCapacity   Float
  avgChannelSize  Float
  medianFeeRate   Float
  timestamp       DateTime @default(now())

  @@index([timestamp])
}

model NodeStats {
  id              String   @id @default(cuid())
  nodePubkey      String
  channelCount    Int
  capacity        Float
  feeRate         Float
  uptime          Float
  timestamp       DateTime @default(now())

  @@index([nodePubkey])
  @@index([timestamp])
}

model RateLimit {
  id        String   @id @default(cuid())
  ip        String
  route     String
  count     Int      @default(0)
  resetAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ip, route])
  @@index([resetAt])
} 
