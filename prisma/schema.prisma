generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model History {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime @default(now())
  price     Float
  volume    Float
  marketCap Float
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  @@map("history")
}

model PeerOfPeer {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  nodePubkey      String
  peerPubkey      String
  alias           String
  platform        String
  version         String
  total_fees      Float
  avg_fee_rate_ppm Float
  total_capacity  Float
  active_channels Int
  total_volume    Float
  total_peers     Int
  uptime          Float
  opened_channel_count Int
  color           String
  address         String
  closed_channel_count Int
  pending_channel_count Int
  avg_capacity    Float
  avg_fee_rate    Float
  avg_base_fee_rate Float
  betweenness_rank Int
  eigenvector_rank Int
  closeness_rank  Int
  weighted_betweenness_rank Int
  weighted_closeness_rank Int
  weighted_eigenvector_rank Int
  timestamp       DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  node            Node     @relation(fields: [nodePubkey], references: [pubkey])

  @@map("peer_of_peer")
}

model Node {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  pubkey                  String   @unique
  alias                   String
  platform                String
  version                 String
  total_fees              Float
  avg_fee_rate_ppm        Float
  total_capacity          Float
  active_channels         Int
  total_volume            Float
  total_peers             Int
  uptime                  Float
  opened_channel_count    Int
  color                   String
  address                 String
  closed_channel_count    Int
  pending_channel_count   Int
  avg_capacity            Float
  avg_fee_rate            Float
  avg_base_fee_rate       Float
  betweenness_rank        Int
  eigenvector_rank        Int
  closeness_rank          Int
  weighted_betweenness_rank Int
  weighted_closeness_rank   Int
  weighted_eigenvector_rank Int
  timestamp               DateTime @default(now())
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  peersOfPeers           PeerOfPeer[]
}

model User {
  id                  String    @id @default(cuid())
  email               String?   @unique
  name                String?
  pubkey              String?   @unique
  subscriptionStatus  String    @default("inactive")
  subscriptionTier    String    @default("none")
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
} 
