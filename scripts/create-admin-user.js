#!/usr/bin/env node

/**
 * Script pour ajouter des droits d'administration √† un utilisateur
 * Usage: node scripts/create-admin-user.js <email>
 *
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function createAdminUser(email) {
  try {
    console.log(`üîç Recherche de l'utilisateur: ${email}`);
    
    // Chercher l'utilisateur dans Supabase Auth
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      throw new Error(`Erreur lors de la r√©cup√©ration des utilisateurs: ${authError.message}`);
    }
    
    const authUser = authUsers.users.find(u => u.email === email);
    
    if (!authUser) {
      throw new Error(`Utilisateur non trouv√©: ${email}`);
    }
    
    console.log(`‚úÖ Utilisateur trouv√©: ${authUser.id}`);
    
    // V√©rifier si l'utilisateur a d√©j√† un r√¥le admin
    const { data: existingRole } = await supabase
      .from('admin_roles')
      .select('*')
      .eq('user_id', authUser.id)
      .single();
    
    if (existingRole) {
      console.log(`‚ö†Ô∏è  L'utilisateur a d√©j√† un r√¥le admin: ${existingRole.role}`);
      return;
    }
    
    // Cr√©er le r√¥le admin
    const { data: newRole, error: insertError } = await supabase
      .from('admin_roles')
      .insert({
        user_id: authUser.id,
        user_email: email,
        role: 'super_admi\n,
        permissions: [
          { resource: 'users', actions: ['read', 'write', 'delete', 'export'] },
          { resource: 'orders', actions: ['read', 'write', 'export'] },
          { resource: 'payments', actions: ['read', 'write', 'export'] },
          { resource: 'subscriptions', actions: ['read', 'write', 'export'] },
          { resource: 'stats', actions: ['read', 'export'] },
          { resource: 'settings', actions: ['read', 'write'] }
        ],
        created_by: authUser.id,
        notes: 'Cr√©√© via script de d√©veloppement'
      })
      .select()
      .single();
    
    if (insertError) {
      throw new Error(`Erreur lors de la cr√©ation du r√¥le: ${insertError.message}`);
    }
    
    console.log(`üéâ R√¥le admin cr√©√© avec succ√®s pour ${email}`);
    console.log(`   R√¥le: ${newRole.role}`);
    console.log(`   ID: ${newRole.id}`);
    
    // Cr√©er une notification de bienvenue
    await supabase
      .from('admin_notifications')
      .insert({
        admin_id: authUser.id,
        type: 'info',
        title: 'Bienvenue dans l\'administratio\n,
        message: 'Vos droits d\'administration ont √©t√© activ√©s avec succ√®s.',
        priority: 'high'
      });
    
    console.log(`üìß Notification de bienvenue cr√©√©e`);
    
  } catch (error) {
    console.error(`‚ùå Erreur:`, error.message);
    process.exit(1);
  }
}

// V√©rifier les arguments
const email = process.argv[2];

if (!email) {
  console.error('‚ùå Veuillez fournir un email');
  console.log('Usage: node scripts/create-admin-user.js <email>');
  process.exit(1);
}

if (!process.env.NEXT_PUBLIC_SUPABASE_URL || !process.env.SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.log('V√©rifiez que NEXT_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finies');
  process.exit(1);
}

// Ex√©cuter le script
createAdminUser(email)
  .then(() => {
    console.log('‚ú® Script termin√© avec succ√®s');
    process.exit(0);
  })
  .catch((error) => {
    console.error('üí• √âchec du script:', error);
    process.exit(1);
  }); 