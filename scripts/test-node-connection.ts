#!/usr/bin/env tsx

/**
 * Script de test pour connexion au n≈ìud Lightning r√©el
 * Usage: npm run test:node-connection
 */

import { createDazNodeLightningService } from '../lib/services/daznode-lightning-service';

// Configuration du n≈ìud r√©el depuis l'interface
const NODE_CONFIG = {
  host: 'xyfhsompwmbzgyannjyt',
  port: '10009',
  macaroon_base64: 'AgEDbG5kAvgBAwoQu54YNs7kr8BtnIyBOxSn5xIBMBoWCgdhZGRyZXNzEgRyZWFkEgV3cml0ZRoTCgRpbmZvEgRyZWFkEgV3cml0ZRoXCghpbnZvaWNlcxIEcmVhZBIFd3JpdGUaIQoIbWFjYXJvb24SCGdlbmVyYXRlEgRyZWFkEgV3cml0ZRoWCgdtZXNzYWdlEgRyZWFkEgV3cml0ZRoXCghmZmZjaGFpbhIEcmVhZBIFd3JpdGUaFgoHb25jaGFpbhIEcmVhZBIFd3JpdGUaFAoFcGVlcnMSBHJlYWQSBXdyaXRlGhgKBnNpZ25lchIIZ2VuZXJhdGUSBHJlYWQAAAYg8VLzRFm94YpzOnIjNXSkS5J2BiVlnrlOkh+P8KRYP/8='
};

async function testNodeConnection() {
  console.log('üîó TEST DE CONNEXION AU N≈íUD LIGHTNING R√âEL');
  console.log('=====================================');
  console.log(`Host: ${NODE_CONFIG.host}`);
  console.log(`Port: ${NODE_CONFIG.port}`);
  console.log(`Socket: ${NODE_CONFIG.host}:${NODE_CONFIG.port}`);
  console.log(`Macaroon length: ${NODE_CONFIG.macaroon_base64.length} chars`);
  
  try {
    // Configuration des variables d'environnement temporaires
    process.env.DAZNODE_ADMIN_MACAROON = NODE_CONFIG.macaroon_base64;
    process.env.DAZNODE_SOCKET = `${NODE_CONFIG.host}:${NODE_CONFIG.port}`;
    
    // Pour le certificat TLS, on va essayer diff√©rentes approches
    // 1. Certificat par d√©faut (peut marcher avec Tor/onion)
    const defaultCert = Buffer.from('LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...', 'base64').toString('base64');
    process.env.DAZNODE_TLS_CERT = defaultCert;
    
    console.log('\nüìã Configuration appliqu√©e');
    console.log('‚úÖ DAZNODE_ADMIN_MACAROON: configur√©');
    console.log('‚úÖ DAZNODE_SOCKET: configur√©');
    console.log('‚ö†Ô∏è  DAZNODE_TLS_CERT: certificat par d√©faut (peut n√©cessiter le vrai certificat)');
    
    console.log('\nüîß Cr√©ation du service Lightning...');
    const service = createDazNodeLightningService();
    
    console.log('\nüíì Test de connectivit√©...');
    const health = await service.healthCheck();
    
    if (health.isOnline) {
      console.log('‚úÖ CONNEXION R√âUSSIE !');
      console.log('üìä Informations du wallet:');
      console.log(`   - Public Key: ${health.walletInfo?.publicKey?.substring(0, 20)}...`);
      console.log(`   - Alias: ${health.walletInfo?.alias}`);
      console.log(`   - Block Height: ${health.walletInfo?.blockHeight}`);
      
      // Test de g√©n√©ration de facture
      console.log('\nüìÑ Test de g√©n√©ration de facture...');
      const invoice = await service.generateInvoice({
        amount: 1000,
        description: 'Test facture depuis n≈ìud r√©el',
        expiry: 3600
      });
      
      console.log('‚úÖ FACTURE G√âN√âR√âE AVEC SUCC√àS !');
      console.log(`   - ID: ${invoice.id}`);
      console.log(`   - Payment Hash: ${invoice.paymentHash?.substring(0, 20)}...`);
      console.log(`   - Amount: ${invoice.amount} sats`);
      console.log(`   - Payment Request: ${invoice.paymentRequest.substring(0, 50)}...`);
      
      // Test de v√©rification de statut
      console.log('\nüîç Test de v√©rification de statut...');
      const status = await service.checkInvoiceStatus(invoice.paymentHash);
      console.log(`‚úÖ Statut v√©rifi√©: ${status.status}`);
      
      console.log('\nüéâ TOUS LES TESTS R√âUSSIS !');
      console.log('üöÄ Le n≈ìud Lightning est pr√™t pour la production !');
      
    } else {
      console.log('‚ùå CONNEXION √âCHOU√âE');
      console.log('üí° Solutions possibles:');
      console.log('   1. V√©rifier que le certificat TLS est correct');
      console.log('   2. V√©rifier que le n≈ìud est accessible');
      console.log('   3. V√©rifier la configuration r√©seau/firewall');
    }
    
  } catch (error) {
    console.error('\n‚ùå ERREUR DE CONNEXION:', error);
    
    if (error instanceof Error) {
      if (error.message.includes('DAZNODE_TLS_CERT')) {
        console.log('\nüí° CERTIFICAT TLS REQUIS');
        console.log('Pour obtenir le certificat TLS:');
        console.log('1. Acc√©dez √† votre n≈ìud Lightning');
        console.log('2. T√©l√©chargez le fichier tls.cert');
        console.log('3. Convertissez en base64: base64 -w0 tls.cert');
        console.log('4. Ajoutez √† DAZNODE_TLS_CERT dans .env');
      } else if (error.message.includes('connection')) {
        console.log('\nüí° PROBL√àME DE CONNEXION');
        console.log('V√©rifiez:');
        console.log('- Le n≈ìud est en ligne et accessible');
        console.log(`- L'adresse ${NODE_CONFIG.host}:${NODE_CONFIG.port} est correcte`);
        console.log('- Les param√®tres r√©seau/proxy');
      }
    }
  }
  
  console.log('\n=====================================');
  console.log('üèÅ Test termin√©');
}

// Variables d'environnement pour le test
function setTestEnvironment() {
  console.log('üîß Configuration des variables d\'environnement de test...');
  
  // Affichage de la configuration pour debug
  console.log('\nüìã Configuration d√©taill√©e:');
  console.log(`   Host: ${NODE_CONFIG.host}`);
  console.log(`   Port: ${NODE_CONFIG.port}`);
  console.log(`   Macaroon (premiers 50 chars): ${NODE_CONFIG.macaroon_base64.substring(0, 50)}...`);
  console.log(`   Socket: ${NODE_CONFIG.host}:${NODE_CONFIG.port}`);
}

// Ex√©cution si le script est lanc√© directement
if (require.main === module) {
  setTestEnvironment();
  
  testNodeConnection()
    .then(() => {
      console.log('\n‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erreur fatale:', error);
      process.exit(1);
    });
}

export default testNodeConnection; 