import { config } from 'dotenv'
import { mcpLightAPI } from '../lib/services/mcp-light-api'

config()

const TEST_PUBKEY = '03eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619'

async function testEndpoints() {
  try {
    console.log('üîÑ Initialisation de MCPLightAPI...')
    await mcpLightAPI.initialize()
    console.log('‚úÖ MCPLightAPI initialis√© avec succ√®s')

    // Test des recommandations
    console.log('\nüîÑ Test des recommandations...')
    const recommendations = await mcpLightAPI.getRecommendations(TEST_PUBKEY)
    console.log('‚úÖ Recommandations r√©cup√©r√©es:', {
      pubkey: recommendations.pubkey,
      count: recommendations.recommendations.length,
      timestamp: recommendations.timestamp
    })

    // Test des priorit√©s
    console.log('\nüîÑ Test des priorit√©s...')
    const priorities = await mcpLightAPI.getPriorityActions(TEST_PUBKEY)
    console.log('‚úÖ Priorit√©s r√©cup√©r√©es:', {
      pubkey: priorities.pubkey,
      count: priorities.priority_actions.length,
      timestamp: priorities.timestamp
    })

    // Test de l'analyse compl√®te
    console.log('\nüîÑ Test de l\'analyse compl√®te...')
    const analysis = await mcpLightAPI.analyzeNode(TEST_PUBKEY)
    console.log('‚úÖ Analyse compl√®te r√©cup√©r√©e:', {
      pubkey: analysis.pubkey,
      timestamp: analysis.timestamp,
      health_score: analysis.summary.health_score
    })

    console.log('\n‚úÖ Tous les tests ont r√©ussi !')

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error)
    process.exit(1)
  }
}

testEndpoints().catch(console.error) 