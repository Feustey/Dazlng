#!/usr/bin/env tsx

import { mcpLightAPI } from '../lib/services/mcp-light-api';

async function quickTest() {
  console.log('üîß Test rapide MCP Light API...\n);

  try {
    // Test 1: V√©rifier que checkHealth ne cause pas de boucle infinie
    console.log('1Ô∏è‚É£ Test de health check...');
    const health = await mcpLightAPI.checkHealth();
    console.log(`‚úÖ Health check: ${health.status}`);
    
    if (health.status === 'unreachable') {
      console.log('‚ö†Ô∏è  API non accessible (normal en d√©veloppement)');
    }

    // Test 2: V√©rifier que l'initialisation ne cause pas de boucle infinie
    console.log('\n2Ô∏è‚É£ Test d'initialisation...');
    try {
      const initialized = await mcpLightAPI.initialize();`
      console.log(`‚úÖ Initialisation: ${initialized ? 'SUCC√àS' : '√âCHEC'}`);
    } catch (initError) {`
      console.log(`‚ö†Ô∏è  Initialisation √©chou√©e (normal sans credentials): ${initError instanceof Error ? initError.message : 'Unknown error'}`);
    }

    // Test 3: V√©rifier que les credentials sont null (normal sans config)
    console.log(\n3Ô∏è‚É£ Test des credentials...');
    const credentials = mcpLightAPI.getCredentials();`
    console.log(`‚úÖ Credentials: ${credentials ? 'CONFIGUR√âS' : 'NON CONFIGUR√âS (normal)'}`);

    console.log(\nüéâ Test rapide r√©ussi - Correction fonctionnelle !');
    console.log('üöÄ Pr√™t pour le d√©ploiement...');
    process.exit(0);

  } catch (error) {
    console.error(\n‚ùå Erreur lors du test rapide:', error);
    console.log(\n‚ö†Ô∏è  Correction n√©cessaire avant d√©ploiement');
    process.exit(1);
  }
}

// Ex√©cuter le test rapide
quickTest(); `