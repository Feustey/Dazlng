#!/usr/bin/env ts-node

/**
 * Script de test simplifi√© pour le syst√®me de fallback
 */

// Configuration tsconfig pour les tests
import path from 'path';
import Module from 'module';

// Mock du logger pour les tests
const mockLogger = {
  info: (message: string, data?: unknown) => console.log(`[INFO] ${message}`, data || ''),
  error: (message: string, error?: unknown) => console.error(`[ERROR] ${message}`, error || ''),
  warn: (message: string, data?: unknown) => console.warn(`[WARN] ${message}`, data || '')
};

// Mock de @/lib/logger
(Module as any)._cache[path.resolve(__dirname, '../lib/logger.ts')] = {
  exports: { logger: mockLogger }
};

async function testInvoiceSystem() {
  console.log('üöÄ Test du syst√®me de fallback des factures\n');
  
  try {
    // Test 1: Import du service
    console.log('üì¶ Test 1: Import du service de fallback');
    const { createInvoiceFallbackService } = await import('../lib/services/invoice-fallback-service');
    console.log('‚úÖ Service import√© avec succ√®s\n');
    
    // Test 2: Cr√©ation d'une instance
    console.log('üîß Test 2: Cr√©ation d\'une instance du service');
    const service = createInvoiceFallbackService({
      maxRetries: 1,
      retryDelay: 500,
      enableLocalLnd: false,
      enableMockService: true
    });
    console.log('‚úÖ Instance cr√©√©e avec succ√®s\n');
    
    // Test 3: Health check
    console.log('üè• Test 3: Health check des services');
    await service.forceHealthCheck();
    const healthCheck = await service.healthCheck();
    console.log(`‚úÖ Health check: ${healthCheck.isOnline ? 'Online' : 'Offline'} - Provider: ${healthCheck.provider}\n`);
    
    // Test 4: Statut des services
    console.log('üìä Test 4: Statut d√©taill√© des services');
    const servicesStatus = service.getServicesStatus();
    Object.entries(servicesStatus).forEach(([name, status]: [string, any]) => {
      const indicator = status.isOnline ? 'üü¢' : 'üî¥';
      console.log(`   ${indicator} ${name}: ${status.isOnline ? 'Online' : 'Offline'}`);
    });
    console.log();
    
    // Test 5: G√©n√©ration de facture (si service disponible)
    if (healthCheck.isOnline) {
      console.log('üí∞ Test 5: G√©n√©ration d\'une facture test');
      const invoice = await service.generateInvoice({
        amount: 1000,
        description: 'Test invoice fallback system',
        expiry: 3600
      });
      console.log('‚úÖ Facture g√©n√©r√©e:');
      console.log(`   - ID: ${invoice.id}`);
      console.log(`   - Montant: ${invoice.amount} sats`);
      console.log(`   - Statut: ${invoice.status}\n`);
      
      // Test 6: V√©rification du statut
      console.log('üîç Test 6: V√©rification du statut de la facture');
      const status = await service.checkInvoiceStatus(invoice.paymentHash);
      console.log(`‚úÖ Statut v√©rifi√©: ${status.status}\n`);
    } else {
      console.log('‚ö†Ô∏è  Test 5 & 6: Ignor√©s - Aucun service disponible\n');
    }
    
    // Nettoyage
    service.destroy();
    console.log('üßπ Nettoyage termin√©\n');
    
    console.log('üéâ Tous les tests sont pass√©s ! Le syst√®me de fallback fonctionne.');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
    process.exit(1);
  }
}

// Test de l'endpoint de sant√©
async function testHealthEndpoint() {
  console.log('\nüåê Test de l\'endpoint de sant√©');
  
  try {
    const response = await fetch('http://localhost:3000/api/lightning/health');
    const health = await response.json();
    
    console.log(`üì° R√©ponse HTTP: ${response.status}`);
    console.log(`üìä Statut global: ${health.status}`);
    console.log(`üîß Provider actif: ${health.fallback?.activeProvider || 'unknown'}`);
    console.log(`üìù Services (${health.services?.length || 0}):`);
    
    health.services?.forEach((service: any) => {
      const indicator = service.status === 'online' ? 'üü¢' : 'üî¥';
      console.log(`   ${indicator} ${service.name} (${service.provider})`);
    });
    
  } catch (error) {
    console.log('‚ö†Ô∏è  Endpoint de sant√© non accessible (serveur pas d√©marr√©?)');
  }
}

// Ex√©cution
async function main() {
  await testInvoiceSystem();
  await testHealthEndpoint();
  process.exit(0);
}

if (require.main === module) {
  main();
}